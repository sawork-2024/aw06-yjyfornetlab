/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.webpos.rest.api;

import com.example.webpos.rest.dto.CartDto;
import com.example.webpos.rest.dto.ErrorDto;
import com.example.webpos.rest.dto.ItemDto;
import com.example.webpos.rest.dto.OrderDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-15T11:05:10.847385300+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "cart", description = "the cart API")
public interface CartsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /carts/{cartId} : Add an item to cart
     *
     * @param cartId The id of the cart to retrieve (required)
     * @param itemDto The details of the item (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addItemToCart",
        summary = "Add an item to cart",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts/{cartId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CartDto> addItemToCart(
        @Parameter(name = "cartId", description = "The id of the cart to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId,
        @Parameter(name = "ItemDto", description = "The details of the item", required = true) @Valid @RequestBody ItemDto itemDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /carts/{cartId}/checkout : checkout a cart
     *
     * @param cartId The id of the cart to get total (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "checkout",
        summary = "checkout a cart",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts/{cartId}/checkout",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrderDto> checkout(
        @Parameter(name = "cartId", description = "The id of the cart to get total", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /carts : Create a new cart
     *
     * @param cartDto An empty cart (required)
     * @return The cart was successfully created (status code 201)
     *         or Bad request. (status code 400)
     *         or Cart not found. (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "createCart",
        summary = "Create a new cart",
        tags = { "carts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The cart was successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cart not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CartDto> createCart(
        @Parameter(name = "CartDto", description = "An empty cart", required = true) @Valid @RequestBody CartDto cartDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /carts/{cartId} : Delete an item from cart
     *
     * @param cartId The id of the cart to retrieve (required)
     * @param itemDto The details of the item (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteItem",
        summary = "Delete an item from cart",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/carts/{cartId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CartDto> deleteItem(
        @Parameter(name = "cartId", description = "The id of the cart to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId,
        @Parameter(name = "ItemDto", description = "The details of the item", required = true) @Valid @RequestBody ItemDto itemDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts : List all carts
     *
     * @return An array of carts (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listCarts",
        summary = "List all carts",
        tags = { "carts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An array of carts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CartDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CartDto>> listCarts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 0, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 } ] }, { \"id\" : 0, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId} : Info for a specific cart
     *
     * @param cartId The id of the cart to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "showCartById",
        summary = "Info for a specific cart",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CartDto> showCartById(
        @Parameter(name = "cartId", description = "The id of the cart to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 1, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId}/total : Total for a specific cart
     *
     * @param cartId The id of the cart to get total (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "showCartTotal",
        summary = "Total for a specific cart",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Double.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}/total",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Double> showCartTotal(
        @Parameter(name = "cartId", description = "The id of the cart to get total", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
